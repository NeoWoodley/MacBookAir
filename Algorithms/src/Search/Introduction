查找
	查找的成本模型
		在学习符号表的实现时，我们会统计"比较"的次数（等价性测试、键的相互比较）。在内循环不进行比较（极少）的情况下，我们会统计数组的访问次数

	符号表
		一张抽象的表格。我们会将信息（值）存储在其中，然后按照指定的键来搜索并获取这些信息。键和值的具体意义取决于不同的应用。符号表中可能会保存很多键和很多信息，因此实现一张高效的符号表也是一项很有挑战性的任务
		符号表有时被称为字典，有时又叫做索引
		符号表最主要的目的就是将一个键和一个值联系起来。用例能够将一个键值对"插入"符号表并希望在之后能够从符号表的所有键值对中按照键直接"找到"相对应的值。有多种构造这样的数据结构的方法，它们不光能够高效地"插入"和"查找"，还可以进行其他方便的操作。要实现符号表，我们首先要定义其背后的数据结构，并指明创建这种数据结构以实现插入、查找等操作所需的算法

		定义
			符号表是一种存储键值对的数据结构，支持两种操作：插入（put），即将一组新的键值对存入表中；查找（get），即根据给定的键得到相应的值

		符号表是一种典型的抽象数据类型：它代表着一组定义清晰的值以及相应的操作，使得我们能够将类型的实现和使用区分开来

		在符号表中，删除的实现可以有两种方法：延时删除，即将键对应的值置为空，然后在某个时刻删去所有值为空的键；及时删除，即立刻从表中删除指定的键

		键的等价性
			要确定一个给定的键是否存在于符号表中，首先要确立对象等价性的概念。自定义的键需要重写equals()方法。和优先队列一样，最好使用不可变的数据类型作为键，否则表的一致性是无法保证的

		排名和选择
			检验一个新的键是否插入合适位置的基本操作是"排名"（rank，找出小于指定键的键的数量）和"选择"（select，找出排名为k的键）

	我们会学习用三种经典的数据类型来实现高效的符号表：二叉查找树、红黑树、散列表